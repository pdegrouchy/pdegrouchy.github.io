<!--?php
require_once('../../python_settings/auth.php');
$pdfClass = isset($_GET['pdfCreation'])?'pdf':'';
?-->
<!DOCTYPE html>
<html class=" js no-mobile desktop no-ie ff ff89 c:-section users-section pdg-section 13%20work-section 00%20city-section 01%20python%20course-section 01%20lectures-section python%20slides-section w-1428 gt-240 gt-320 gt-480 gt-640 gt-768 gt-800 gt-1024 gt-1280 lt-1440 lt-1680 lt-1920 no-portrait landscape gradient rgba opacity textshadow multiplebgs boxshadow borderimage borderradius no-cssreflections csstransforms csstransitions no-touch retina fontface domloaded" id="session900-page"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<title>Session 9</title>

		<link rel="stylesheet" href="Session9_files/reveal.css">
		<link rel="stylesheet" href="Session9_files/simple.css" id="theme">
		<!-- Custom css -->
        <link rel="stylesheet" href="Session9_files/custom.css">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="Session9_files/font-awesome_002.css">
		<!--?php if($pdfClass!=='') {
				?-->
				<link rel="stylesheet" href="Session9_files/default.css">
				<!--?php
				} else {?-->
				<link rel="stylesheet" href="Session9_files/zenburn.css"> <!--?php
				}?-->

				<!-- City specific fixes -->
				<link rel="stylesheet" href="Session9_files/city.css">
				<!--?php
				if($pdfClass!=='') {
						?-->
						<link rel="stylesheet" href="Session9_files/cityhandouts.css"><!--?php
				}
		?-->

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script><link rel="stylesheet" type="text/css" href="Session9_files/paper.css"><script type="text/javascript" src="Session9_files/marked.js"></script><script type="text/javascript" src="Session9_files/markdown.js"></script><script type="text/javascript" src="Session9_files/menu.js"></script><script type="text/javascript" src="Session9_files/jquery-2.js"></script><script type="text/javascript" src="Session9_files/custom.js"></script><script type="text/javascript" src="Session9_files/clipboard.js"></script>
	<script type="text/javascript" src="Session9_files/notes.js"></script><script type="text/javascript" src="Session9_files/highlight.js"></script><script type="text/javascript" src="Session9_files/jeesh.js"></script><script type="text/javascript" src="Session9_files/bowser.js"></script><link rel="stylesheet" href="Session9_files/menu.css"><link rel="stylesheet" href="Session9_files/font-awesome.css"></head>
	<body><body<?php if($pdfclass!="='')" echo="" '="" id="pdf" ';?="">&gt;
	<p class="newlogo"><a href="https://moodle.city.ac.uk/%3C?php%20if(isset($_SESSION[%27cid%27]))%20{%20?%3Ecourse/view.php?id=%3C?php%20echo%20$_SESSION[%27cid%27];%20}%20?%3E"><img alt="Courses" src="Session9_files/logo.png" border="0"></a></p>
		<div class="reveal slide" role="application" data-transition-speed="default" data-background-transition="fade">
			<div class="slides" style="width: 960px; height: 700px; inset: 50% auto auto 50%; transform: translate(-50%, -50%) scale(1.08386);">
				<section class="present" style="display: block;" data-node-uid="1">
					<h2>Introduction to programming with Python</h2>
					<h3>Session 9</h3>
				</section>
				<section class="future" style="display: block;" data-node-uid="2" aria-hidden="true" hidden="">
					<h3>Objectives</h3>
					<ul style="width:100%;font-size: 28px">
						<li>Quick review of what HTML is</li>
                        <li>The find() string method</li>
                        <li>Regular expressions</li>
                        <li>Installing external libraries</li>
                        <li>Using a web parser: BeautifulSoup</li>
                        <li>Submitting data to a form using MechanicalSoup</li>
                        <li>Fetching data in real time</li>
					</ul>
				</section>

                <section class="future" style="display: block;" data-node-uid="3" aria-hidden="true" hidden="">
                    <h3>The HTML language</h3>
                    <ul>
                        <li>HTML is the standard language for creating content on the web.</li>
                        <li>Every webpage is written in HTML.</li>
                        <li>To see the source code of the webpage you are currently seeing,
                            either right click and select "View page source", or from the menu 
                            of your browser, click on View and "View Source".
							Alternatively, you can use keyboard shortcut Ctrl+U (Command+U on a mac).
                        </li>
                    </ul>
                </section>

                <section class="future" style="display: none;" data-node-uid="4" aria-hidden="true" hidden="">
                    <h3>Example</h3>
                    <p><a target="_blank" href="file:///C:/Users/PdG/13%20Work/00%20City/01%20Python%20Course/01%20Lectures/Python%20Slides/practice/Profile_Aphrodite.htm">Profile_Aphrodite.htm</a></p>
                    <div><pre class="solution-content python stretch"><code style="line-height: 100%;font-size: 26px;" class="hljs">&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span>
	  content=<span class="hljs-string">"text/html; charset=windows-1252"</span>&gt;
  &lt;title&gt;Profile: Aphrodite&lt;/title&gt;
  &lt;link rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span>&gt;
&lt;/head&gt;
&lt;body bgcolor=<span class="hljs-string">"yellow"</span>&gt;
  &lt;center&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;img src=<span class="hljs-string">"./Profile_ Aphrodite_files/aphrodite.gif"</span>&gt;
    &lt;h2&gt;Name: Aphrodite&lt;/h2&gt;
    &lt;br&gt;&lt;br&gt;
    Favorite animal: Dove
    &lt;br&gt;&lt;br&gt;
    Favorite color: Red
    &lt;br&gt;&lt;br&gt;
    Hometown: Mount Olympus
  &lt;/center&gt;
&lt;/body&gt;&lt;/html&gt;</code></pre></div>
                </section>

                <section class="future" style="display: none;" data-node-uid="5" aria-hidden="true" hidden="">
                    <h3>Grab all html from a web page</h3>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen
my_address = <span class="hljs-string">"https://www.city.ac.uk/"</span>
html_page = urlopen(my_address)
html_text = html_page.read().decode(<span class="hljs-string">'windows-1252'</span>)
print(html_text)</code></pre></div>
                    <p>What is the type of object that is returned?</p>
                </section>

                <section class="future" style="display: none;" data-node-uid="6" aria-hidden="true" hidden="">
                    <h3>Parsing a web page with a String's method</h3>
                    <ul>
                        <li>You can use the <strong>find()</strong> method</li>
                        <li>Example:</li>
                    </ul>
                    <iframe src="Session9_files/b7feff185a.htm" marginwidth="0" marginheight="0" allowfullscreen="" width="100%" height="300" frameborder="0"></iframe>
                    <!--
                    <div><pre class="solution-content python"><code>this_is_my_string = 'Programming in python'
string_to_find = input('Enter a string to find in \'%s\': ' % this_is_my_string)
index_found = this_is_my_string.find(string_to_find)
print(index_found)
print(this_is_my_string[index_found])</code></pre></div>
-->
                </section>

                <section class="future" style="display: none;" data-node-uid="7" aria-hidden="true" hidden="">
                    <h3>Find a word between 2 other words</h3>
                    <iframe src="Session9_files/b7f28ac6c1.htm" marginwidth="0" marginheight="0" allowfullscreen="" width="100%" height="400" frameborder="0"></iframe>
                    <!--
                    <div><pre class="solution-content python"><code>my_string = 'some text with a special word ' \
            '<strong>Equanimity</strong>'
start_tag = "<strong>"
end_tag = "</strong>"
start_index = my_string.find(start_tag) + len(start_tag)
end_index = my_string.find(end_tag)
# We extract the text between
# the last index of the first tag '>'
# and the first index of the second tag '<'
print(my_string[start_index:end_index])</code></pre></div>
                    -->
                </section>

                <section class="future" style="display: none;" data-node-uid="8" aria-hidden="true" hidden="">
                    <h3>Parsing the title with the find() method</h3>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen
my_address = <span class="hljs-string">"http://www.staff.city.ac.uk/~ddimak/python/"</span> \
             <span class="hljs-string">"practice/Profile_Aphrodite.htm"</span>
html_page = urlopen(my_address)
html_text = html_page.read().decode(<span class="hljs-string">'windows-1252'</span>)
start_tag = <span class="hljs-string">"&lt;title&gt;"</span>
end_tag = <span class="hljs-string">"&lt;/title&gt;"</span>
start_index = html_text.find(start_tag) + len(start_tag)
end_index = html_text.find(end_tag)
print(html_text[start_index:end_index])</code></pre></div>
                </section>

                <section class="future" style="display: none;" data-node-uid="9" aria-hidden="true" hidden="">
                    <h3>Limitation of the find() method</h3>
                    <ul>
                        <li>Try to use the same script for extracting the title of <a target="_blank" href="file:///C:/Users/PdG/13%20Work/00%20City/01%20Python%20Course/01%20Lectures/Python%20Slides/practice/Profile_Poseidon.htm">Profile_Poseidon.htm</a> </li>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen
my_address = <span class="hljs-string">"http://www.staff.city.ac.uk/~ddimak/python/"</span> \
             <span class="hljs-string">"practice/Profile_Poseidon.htm"</span>
html_page = urlopen(my_address)
html_text = html_page.read().decode(<span class="hljs-string">'windows-1252'</span>)
start_tag = <span class="hljs-string">"&lt;title&gt;"</span>
end_tag = <span class="hljs-string">"&lt;/title&gt;"</span>
start_index = html_text.find(start_tag) + len(start_tag)
end_index = html_text.find(end_tag)
print(html_text[start_index:end_index])</code></pre></div>
                </section>

                <section class="future" style="display: none;" data-node-uid="10" aria-hidden="true" hidden="">
                    <h3>Limitation of the find() method</h3>
                    <ul>
                        <li>Do you see the difference? We are not getting what we want now:</li>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs">&lt;head&gt;&lt;meta http-equiv=<span class="hljs-string">"Content-Type"</span> content=<span class="hljs-string">"text/html; charset=windows-1252"</span>&gt;
&lt;title &gt;Profile: Poseidon</code></pre></div>
                    <ul>
                        <li>This is because of the extra space before the closing "&gt;" in &lt;title &gt;</li>
                        <li>The html is still rendered by the browser, but we cannot rely on HTML being 100% compliant if we want to parse a web page.</li>
                    </ul>

                </section>

                <section class="future" style="display: none;" data-node-uid="11" aria-hidden="true" hidden="">
                    <h3>Regular expressions</h3>
                    <ul>
                        <li>They are used to determine whether or not a text matches a particular pattern</li>
                        <li>We can use them thanks to the <strong>re</strong> module in python</li>
                        <li>They use special characters to represent patterns: ^, $, *, +, ., etc...</li>
                    </ul>
                </section>

                <section class="future" style="display: none;" data-node-uid="12" aria-hidden="true" hidden="">
                    <h3>re.findall() using *</h3>
                    <ul>
                        <li>The asterisk character <strong>*</strong> stands for "zero or more" of whatever came just before the asterisk</li>
                        <li><strong>re.findall():</strong></li>
                        <ul>
                            <li>finds any text within a string that matches a given pattern i.e. regex</li>
                            <li>takes 2 arguments, the 1st is the regex, the 2nd is the string to test</li>
                            <li>returns a list of all matches</li>
                        </ul>
                    </ul>
                    <p></p>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-comment"># re.findall(&lt;regular_expression&gt;, &lt;string_to_test&gt;)</span></code></pre></div>
                </section>

                <section class="future" style="display: none;" data-node-uid="13" aria-hidden="true" hidden="">
                    <h3>Interactive example</h3>
                    <iframe src="Session9_files/7c42a37566.htm" marginwidth="0" marginheight="0" allowfullscreen="" width="100%" height="450" frameborder="0"></iframe>
                </section>

                <section class="future" style="display: none;" data-node-uid="14" aria-hidden="true" hidden="">
                    <h3>re.findall() case insensitive</h3>
                    <ul>
                        <li>Note that re.findall() is case sensitive</li>
                        <div><pre class="solution-content python"><code class="hljs">re.findall(<span class="hljs-string">'ab*c'</span>, <span class="hljs-string">'ABC'</span>) <span class="hljs-comment"># nothing found</span></code></pre></div>
                        <li>We can use a 3rd argument <strong>re.IGNORECASE</strong> to ignore the case</li>
                        <div><pre class="solution-content python"><code class="hljs">re.findall(<span class="hljs-string">'ab*c'</span>, <span class="hljs-string">'ABC'</span>, re.IGNORECASE) <span class="hljs-comment"># ABC found</span></code></pre></div>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="15" hidden="">
                    <h3>re.findall() using . (period)</h3>
                    <ul>
                        <li>the period <strong>.</strong> stands for any single character in a regular expression</li>
                        <li>For instance we could find all the strings that contain letters "a" and "c" separated by a single character as follows:</li>
                        <iframe src="Session9_files/396b754ffd.htm" marginwidth="0" marginheight="0" allowfullscreen="" width="100%" height="200" frameborder="0"></iframe>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="16" hidden="">
                    <h3>re.findall() using .* (period asterisk)</h3>
                    <ul>
                        <li>the term <strong>.*</strong> stands for any character being repeated any number of times</li>
                        <li>for instance we could find all the string that starts with "a" and ends with "c", regardless of what is in between with:</li>
                        <iframe src="Session9_files/1bae467299.htm" marginwidth="0" marginheight="0" allowfullscreen="" width="100%" height="200" frameborder="0"></iframe>
                    </ul>
                    <!--
import re
print(re.findall('a.*c', 'abc'))
print(re.findall('a.*c', 'abbc'))
print(re.findall('a.*c', 'ac'))
print(re.findall('a.*c', 'acc'))
                    -->
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="17" hidden="">
                    <h3>re.search()</h3>
                    <ul>
                        <li><strong>re.search():</strong></li>
                        <ul>
                            <li>searches for a particular pattern inside a string</li>
                            <li>returns a MatchObject that stores different "groups" of data</li>
                            <li>when we call the group() method on a MatchObject, we get the first and most inclusive result</li>
                        </ul>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">import</span> re
match_results = re.search(<span class="hljs-string">'ab*c'</span>, <span class="hljs-string">'ABC'</span>, re.IGNORECASE)
print(match_results.group())  <span class="hljs-comment"># returns ABC</span></code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="18" hidden="">
                    <h3>re.sub()</h3>
                    <ul>
                        <li>re.sub()</li>
                        <ul>
                            <li>allows to replace a text in a string that matches a pattern with a substitute (like the replace() string method)</li>
                            <li>takes 3 arguments:</li>
                            <ol>
                                <li>regex</li>
                                <li>replacement text</li>
                                <li>string to parse</li>
                            </ol>
                        </ul>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs">my_string = <span class="hljs-string">"This is very boring"</span>
print(my_string.replace(<span class="hljs-string">'boring'</span>, <span class="hljs-string">'funny'</span>))
<span class="hljs-keyword">import</span> re
print(re.sub(<span class="hljs-string">'boring'</span>, <span class="hljs-string">'WHAT?'</span>, my_string))</code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="19" hidden="">
                    <h3>greedy regex (*)</h3>
                    <ul>
                        <li><strong>greedy</strong> expressions try to find the longest possible match when character like <strong>*</strong> are used</li>
                        <li>for instance, in this example the regex finds everything between '&lt;' and  '&gt;' which is actually the whole <em>'&lt;replaced&gt; if it is in &lt;tags&gt;'</em></li>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs">my_string = <span class="hljs-string">'Everything is &lt;replaced&gt; if it is in &lt;tags&gt;'</span>
my_string = re.sub(<span class="hljs-string">'&lt;.*&gt;'</span>, <span class="hljs-string">'BAR'</span>, my_string)
print(my_string)  <span class="hljs-comment"># 'Everything is BAR'</span></code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="20" hidden="">
                    <h3>non-greedy regex (*?)</h3>
                    <ul>
                        <li><strong>*?</strong></li>
                        <ul>
                            <li>works the same as * BUT matches the shortest possible string of text</li>
                        </ul>
                    </ul>
                    <div><pre class="solution-content python"><code class="hljs">my_string = <span class="hljs-string">'Everything is &lt;replaced&gt; if it is in &lt;tags&gt;'</span>
my_string = re.sub(<span class="hljs-string">'&lt;.*?&gt;'</span>, <span class="hljs-string">'BAR'</span>, my_string)
print(my_string)  <span class="hljs-comment"># 'Everything is BAR if it is in BAR'</span></code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="21" hidden="">
                    <h3>Use case: Using regex to parse a webpage</h3>
                    <ul>
                        <li><a target="_blank" href="file:///C:/Users/PdG/13%20Work/00%20City/01%20Python%20Course/01%20Lectures/Python%20Slides/practice/Profile_Dionysus.htm">Profile_Dionysus.htm</a></li>
                        <li>We want to extract the title:</li>
                        <div><pre class="solution-content python"><code class="hljs">&lt;TITLE &gt;Profile: Dionysus&lt;/title  / &gt;</code></pre></div>
                        <li>We will use the regular expression for this case</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="22" hidden="">
                    <h3>Use case: solution</h3>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">import</span> re
<span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen
my_address = <span class="hljs-string">"http://www.staff.city.ac.uk/~ddimak/python/practice/Profile_Dionysus.htm"</span>
html_page = urlopen(my_address)
html_text = html_page.read().decode(<span class="hljs-string">'windows-1252'</span>)
match_results = re.search(<span class="hljs-string">"&lt;title .*?&gt;.*&lt;/title .*?&gt;"</span>, html_text, re.IGNORECASE)
title = match_results.group()
title = re.sub(<span class="hljs-string">"&lt;.*?&gt;"</span>, <span class="hljs-string">""</span>, title)
print(title)</code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="23" hidden="">
                    <h3>Use case: explanation</h3>
                    <ul>
                        <li>&lt;title .*?&gt; finds the opening tag where there must be a space after the word "title" and the tag must be closed,
                            but any characters can appear in the rest of the tag.
                            We use the non-greedy <strong>*?</strong>, because we want the first closing "&gt;" to match the tag's end</li>
                        <li><strong>.*</strong> any character can appear in between the &lt;title&gt; tag</li>
                        <li>&lt;\title .*?&gt; same expression as the first part but with the forward slash to represent a closing HTML tag</li>
                        <li>More on regex: <a target="_blank" href="https://docs.python.org/3.5/howto/regex.html">https://docs.python.org/3.5/howto/regex.html</a></li>
                    </ul>
                </section>

                <section id="installing-package" aria-hidden="true" class="future" style="display: none;" data-node-uid="24" hidden="">
                    <h3>Installing an external library</h3>
                    <ul>
                        <li>Sometimes what you need is not included in the python standard library and you have to install an external library</li>
                        <li>You are going to use a python package manager: <strong><a target="_blank" href="https://pip.pypa.io/en/latest/installing/">pip</a></strong></li>
                        <li>The packages (libraries) that you can install with pip are listed on <a target="_blank" href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a></li>
                        <li>If you do not have pip, you can use the 
command "python setup.py install" from the package you would have 
downloaded and uncompressed from <a target="_blank" href="https://pypi.python.org/pypi">pypi</a></li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="25" hidden="">
                    <h3>Installing with Pycharm (1)</h3>
                    <img src="Session9_files/pycharm_install_package1.PNG" style="background:none; border:none; box-shadow:none; margin-top:0px;height: 450px">
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="26" hidden="">
                    <h3>Installing with Pycharm (2)</h3>
                    <img src="Session9_files/pycharm_install_package2.PNG" style="background:none; border:none; box-shadow:none; margin-top:0px;height: 450px">
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="27" hidden="">
                    <h3>Installing with Pycharm (3)</h3>
                    <img src="Session9_files/pycharm_install_package3.PNG" style="background:none; border:none; box-shadow:none; margin-top:0px;height: 450px">
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="28" hidden="">
                    <h3>Using Beautiful Soup</h3>
                    <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup
<span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen
my_address = <span class="hljs-string">"http://www.staff.city.ac.uk/~ddimak/python/"</span> \
             <span class="hljs-string">"practice/Profile_Dionysus.htm"</span>
html_page = urlopen(my_address)
html_text = html_page.read().decode(<span class="hljs-string">'utf-8'</span>)
my_soup = BeautifulSoup(html_text, <span class="hljs-string">"html.parser"</span>)</code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="29" hidden="">
                    <h3>BeautifulSoup: get_text()</h3>
                    <ul>
                        <li><strong>get_text()</strong></li>
                        <ul>
                            <li>is extracting only the text from an html document</li>
                            <div><pre class="solution-content python"><code class="hljs">print(my_soup.get_text())</code></pre></div>
                        </ul>
                        <li>there are lot of blank lines left but we can remove them with the method <strong>replace()</strong></li>
                        <div><pre class="solution-content python"><code class="hljs">print(my_soup.get_text().replace(<span class="hljs-string">"\n\n\n"</span>,<span class="hljs-string">""</span>))</code></pre></div>
                        <li>Using BeautifulSoup to extract the text first and use the find() method is <em>sometimes</em> easier than to use regular expressions</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="30" hidden="">
                    <h3>BeautifulSoup: find_all()</h3>
                    <ul>
                        <li>find_all()</li>
                        <ul>
                            <li>returns a list of all elements of a particular tag given in argument</li>
                        </ul>
                    <div><pre class="solution-content python"><code class="hljs">print(my_soup.find_all(<span class="hljs-string">"img"</span>))</code></pre></div>
                        <li>What if the HTML page is broken?</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="31" hidden="">
                    <h3>BeautifulSoup: Tags</h3>
                                        <div><pre class="solution-content python"><code style="line-height: 100%" class="hljs">[&lt;img src=<span class="hljs-string">"dionysus.jpg"</span>/&gt;, &lt;img src=<span class="hljs-string">"grapes.png"</span>&gt;&lt;br&gt;&lt;br&gt;
Hometown: Mount Olympus
&lt;br&gt;&lt;br&gt;
Favorite animal: Leopard &lt;br&gt;
&lt;br&gt;
Favorite Color: Wine
&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/img&gt;]</code></pre></div>
                    <ul>
                        <li>This is not what we were looking for. The 
&lt;img&gt; is not properly closed therefore BeautifulSoup ends up 
adding a fair
                            amount of HTML after the image tag before 
inserting a &lt;/img&gt; tag on its own. This is often seen in the wild.</li>
                        <li>NB: BeautifulSoup is storing HTML tags as <em>Tag</em> objects and we can extract information from each Tag.</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="32" hidden="">
                    <h3>BeautifulSoup: Extracting information from Tags</h3>
                    <ul>
                        <li><strong>Tags</strong>:</li>
                        <ul>
                            <li>have a name</li>
                            <li>have attributes
                                <ul>
                                    <li>Attributes are accessible using keys</li>
                                    <li>works similarly to accessing values of a dictionary through its keys</li>
                                </ul>
                            </li>
                        </ul>
                    </ul>
                        <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> my_soup.find_all(<span class="hljs-string">"img"</span>):
    print(tag.name)
    print(tag[<span class="hljs-string">'src'</span>])</code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="33" hidden="">
                    <h3>BeautifulSoup: accessing a Tag through its name</h3>
                    <ul>
                        <div><pre class="solution-content python"><code class="hljs">print(my_soup.title)</code></pre></div>
                        <li>The HTML is cleaned up</li>
                        <li>We can use the string attributes stored by the title</li>
                        <div><pre class="solution-content python"><code class="hljs">print(my_soup.title.string)</code></pre></div>
                    </ul>

                </section>
                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="34" hidden="">
                    <h3>The select method (1)</h3>
                    <ul>
                        <li>... will return a list of Tag objects, which is how Beautiful Soup represents an HTML element. The list will
                        contain one Tag object for every match in the BeautifulSoup object's HTML</li>

                    </ul>
                </section>

                <section id="beautifulsoup-select" aria-hidden="true" class="future" style="display: none;" data-node-uid="35" hidden="">
                    <h3>The select method (2)</h3>
                    <table style="font-size: 24px">
						<tbody><tr>
							<th style="width: 30%;">Selector passed to the select method</th>
							<th>Will match...</th>
						</tr>
						<tr>
							<td>soup.select('div')</td>
							<td>All elements named &lt;div&gt;</td>
						</tr>
						<tr>
							<td>soup.select('#author')</td>
							<td>The element with an <strong>id</strong> attribute of <strong>author</strong></td>
						</tr>
						<tr>
							<td>soup.select('.notice')</td>
							<td>All elements that use CSS class notice</td>
						</tr>
						<tr>
							<td>soup.select('div span')</td>
							<td>All elements named &lt;span&gt; that are within an element named &lt;div&gt;</td>
						</tr>
						<tr>
							<td>soup.select('div &gt; span')</td>
							<td>All elements named &lt;span&gt; that are directly within an element named &lt;div&gt;, with no other elements in between</td>
						</tr>
						<tr>
							<td>soup.select('input[name]')</td>
							<td>All elements named &lt;input&gt; that have a <strong>name</strong> attribute with any value</td>
						</tr>
						<tr>
							<td>soup.select('input[type="button"]')</td>
							<td>All elements named &lt;input&gt; that have an attribute name <strong>type</strong> with value <strong>button</strong></td>
						</tr>
					</tbody></table>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="36" hidden="">
                    <h3>Emulating a web browser</h3>
                    <ul>
                        <li>Sometimes we need to submit information to a web page, like a login page</li>
                        <li>We need a web browser for that</li>
                        <li><strong><a target="_blank" href="https://github.com/hickford/MechanicalSoup">MechanicalSoup</a></strong> is an alternative to urllib that can do all the same things but has more added
                            functionality that will allow us to talk back to webpages without using a standalone browser.
                            Perfect for fetching web pages, clicking on buttons and links, and filling out and submitting forms</li>
                    </ul>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="37" hidden="">
                    <h3>Installing MechanicalSoup</h3>
                    <ul>
                        <li>You can install it with pip: <em>pip install MechanicalSoup</em> or within Pycharm (like what we did earlier with BeautifulSoup)</li>
                        <li>You might need to restart your IDE for MechanicalSoup to load and be recognised</li>
                    </ul>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="38" hidden="">
                    <h3>MechanicalSoup: Opening a web page</h3>
                    <ul>
                        <li>Create a browser</li>
                        <li>Get a web page which is a Response object</li>
                        <li>Access the HTML content with the <em>soup</em> attribute</li>
                        <div><pre class="solution-content python"><code class="hljs"><span class="hljs-keyword">import</span> mechanicalsoup

my_browser = mechanicalsoup.Browser(
                 soup_config={<span class="hljs-string">'features'</span>:<span class="hljs-string">'html.parser'</span>})
page = my_browser.get(<span class="hljs-string">"http://www.staff.city.ac.uk/~ddimak/python/"</span> \
           <span class="hljs-string">"practice/Profile_Aphrodite.htm"</span>)
print(page.soup)</code></pre></div>

                    </ul>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="39" hidden="">
                    <h3>MechanicalSoup: Submitting values to a form</h3>
                    <ul>
                        <li>Have a look at this <a target="_blank" href="https://whispering-reef-69172.herokuapp.com/login">login page</a></li>
                        <li>The important section is the login form</li>
                        <li>We can see that there is a submission &lt;form&gt; named "login" that includes two &lt;input&gt; tags, one named
                            <em>username</em> and the other one named <em>password</em>.</li>
                        <li>The third &lt;input&gt; is the actual "Submit" button</li>
                    </ul>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="40" hidden="">
                    <h3>MechanicalSoup: script to login</h3>
                    <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 26px;" class="hljs"><span class="hljs-keyword">import</span> mechanicalsoup

my_browser = mechanicalsoup.Browser(
    soup_config={<span class="hljs-string">'features'</span>:<span class="hljs-string">'html.parser'</span>})
login_page = my_browser.get(
    <span class="hljs-string">"https://whispering-reef-69172.herokuapp.com/login"</span>)
login_html = login_page.soup

form = login_html.select(<span class="hljs-string">"form"</span>)[<span class="hljs-number">0</span>]
form.select(<span class="hljs-string">"input"</span>)[<span class="hljs-number">0</span>][<span class="hljs-string">"value"</span>] = <span class="hljs-string">"admin"</span>
form.select(<span class="hljs-string">"input"</span>)[<span class="hljs-number">1</span>][<span class="hljs-string">"value"</span>] = <span class="hljs-string">"default"</span>

profiles_page = my_browser.submit(form, login_page.url)
print(profiles_page.url)
print(profiles_page.soup)</code></pre></div>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="41" hidden="">
                    <h3>Methods in MechanicalSoup</h3>
                    <ul>
                        <li>We created a Browser object</li>
                        <li>We called the method <em>get</em> on the Browser object to get a web page</li>
                        <li>We used the <em>select()</em> method to grab the form and input values in it</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="42" hidden="">
                    <h3>Interacting with the Web in Real Time</h3>
                    <ul>
                        <li>We want to get data from a website that is constantly updated</li>
                        <li>We actually want to simulate clicking on the "refresh" button</li>
                        <li>We can do that with the <em>get</em> method of MechanicalSoup</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="43" hidden="">
                    <h3>Use case: fetching a stock quote from Nasdaq (1)</h3>
                    <ul>
                        <li>Let us identify what is needed</li>
                        <li>
                        <ul>
                            <li>What is the source of the data? <br><strong><a href="https://www.nasdaq.com/symbol/ba">https://www.nasdaq.com/symbol/ba</a></strong></li>

                            <li>What do we want to extract from this source? <br><strong>The stock price</strong></li>

                        </ul>
                        </li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="44" hidden="">
                    <h3>Use case: fetching a stock quote from Nasdaq (2)</h3>

                    <ul>
                        <li>If we look at the source code, we can see what the tag is for the stock and how to retrieve it:</li>
                        <li><div><pre class="solution-content python"><code style="line-height: 100%;font-size: 26px;" class="hljs">&lt;div id=<span class="hljs-string">"qwidget_lastsale"</span> <span class="hljs-class"><span class="hljs-keyword">class</span>="<span class="hljs-title">qwidget</span>-<span class="hljs-title">dollar</span>"&gt;$367.16&lt;/<span class="hljs-title">div</span>&gt;</span></code></pre></div></li>
                        <li>An <strong>id</strong> is unique and should 
only appear once in the page. However, it is good practice to check that
 the id appears only once in the webpage.</li>

                    </ul>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="45" hidden="">
                    <h3>MechanicalSoup: script to find Boeing current price</h3>
                    <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 26px;" class="hljs"><span class="hljs-keyword">import</span> mechanicalsoup

my_browser = mechanicalsoup.Browser()
page = my_browser.get(<span class="hljs-string">"https://www.nasdaq.com/symbol/ba"</span>)
html_text = page.soup
<span class="hljs-comment"># return a list of all the tags where</span>
<span class="hljs-comment"># the css id is 'qwidget_lastsale'</span>
my_tags = html_text.select(<span class="hljs-string">"#qwidget_lastsale"</span>)

<span class="hljs-comment"># take the BeautifulSoup string out of the</span>
<span class="hljs-comment"># first (and only) &lt;div&gt; tag</span>
my_price = my_tags[<span class="hljs-number">0</span>].text
print(<span class="hljs-string">"The current price of "</span>
      <span class="hljs-string">"Boeing is: {}"</span>.format(my_price))</code></pre></div>

                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="46" hidden="">
                    <h3>Repeatedly get Boeing's current price</h3>
                    <ul>
                        <li>Now that we know how to get the price of a stock from the Nasdaq web page, we can create a for loop to stay up to date</li>
                        <li>Note that we should not overload the Nasdaq 
website with more requests than we need. And also, we should also have a
 look at their
                            <a href="https://www.nasdaq.com/robots.txt">robots.txt</a> file to be sure that what we do is allowed
                        </li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="47" hidden="">
                    <h3>Introduction to the <em>time.sleep()</em> method</h3>
                    <ul>
                        <li>The <em>sleep()</em> method of the module 
time takes a number of seconds as argument
                            and waits for this number of seconds, it 
enables to delay the execution of a statement in the program</li>
                    </ul>
                    <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 26px;" class="hljs"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep
<span class="hljs-keyword">print</span> <span class="hljs-string">"I'm about to wait for five seconds..."</span>
sleep(<span class="hljs-number">5</span>)
<span class="hljs-keyword">print</span> <span class="hljs-string">"Done waiting!"</span></code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="48" hidden="">
                    <h3>Repeatedly get the Boeing current price: script</h3>
                    <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 24px;" class="hljs"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep
<span class="hljs-keyword">import</span> mechanicalsoup
my_browser = mechanicalsoup.Browser()
<span class="hljs-comment"># obtain 1 stock quote per minute for the next 3 minutes</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):
    page = my_browser.get(<span class="hljs-string">"https://www.nasdaq.com/symbol/ba"</span>)
    html_text = page.soup
    <span class="hljs-comment"># return a list of all the tags where the css id is 'qwidget_lastsale'</span>
    my_tags = html_text.select(<span class="hljs-string">"#qwidget_lastsale"</span>)
    <span class="hljs-comment"># take the BeautifulSoup string out of the first tag</span>
    my_price = my_tags[<span class="hljs-number">0</span>].text
    print(<span class="hljs-string">"The current price of BA is: {}"</span>.format(my_price))
    <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">2</span>: <span class="hljs-comment"># wait a minute if this isn't the last request</span>
        sleep(<span class="hljs-number">60</span>)</code></pre></div>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="49" hidden="">
                    <h3>Exercise: putting it all together</h3>
                    <ul>
                        <li>Install a new library called <em>requests</em></li>
                        <li>Using <a href="#/beautifulsoup-select">the select method</a> of BeautifulSoup, parse (that
                            is, analyze and identify the parts of) the image of the day of <a href="http://xkcd.com/">http://xkcd.com/</a></li>
                        <li>Using the <em>get</em> method of the <em>requests</em> library, download the image</li>
                        <li>Complete the following program <a href="file:///C:/Users/PdG/13%20Work/00%20City/01%20Python%20Course/01%20Lectures/Python%20Slides/exercises/xkcd_incomplete.py">xkcd_incomplete.py</a></li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="50" hidden="">
                    <h3>Using request</h3>
                    <ul>
                        <li>You first have to import it</li>
                        <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 24px;" class="hljs"><span class="hljs-keyword">import</span> requests</code></pre></div>
                        <li>If you want to download the webpage, use the get() method with a url in parameter, such as:</li>
                        <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 24px;" class="hljs">res = requests.get(url)</code></pre></div>
                        <li>Stop your program if there is an error with the raise_for_status() method</li>
                        <div><pre class="solution-content python"><code style="line-height: 100%;font-size: 24px;" class="hljs">res.raise_for_status()</code></pre></div>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="51" hidden="">
                    <h3>Next? Web crawling!</h3>
                    <ul>
                        <li>From Wikipedia: A Web crawler is an Internet
 bot which systematically browses the World Wide Web, typically for the 
purpose of Web indexing.</li>
                        <li>How do you navigate a website? For example, for the <a href="http://xkcd.com/">http://xkcd.com/</a> website, how could you <strong>retrieve all of its images?</strong></li>
                        <li>Write down how you would design your program</li>
                        <li>Write the program</li>
                    </ul>
                </section>

                <section aria-hidden="true" class="future" style="display: none;" data-node-uid="52" hidden="">
                    <h3>Solution for Web Crawling</h3>
                                    <div class="solution">
                    <p class="show-solution"><i class="fa fa-eye" aria-hidden="true"></i>Solution</p>
                    <p class="hide-solution" style="margin-top: 0px; margin-bottom: 0px;"><i class="fa fa-eye-slash" aria-hidden="true"></i>Hide solution</p>
                    <p class="solution-content python">Download the script here: <a href="file:///C:/Users/PdG/13%20Work/00%20City/01%20Python%20Course/01%20Lectures/Python%20Slides/exercises/xkcd_downloader.py">xkcd_downloader.py</a> </p>
                </div>
                </section>

			</div>
		<div class="backgrounds"><div class="slide-background present" style="display: block;" data-loaded="true"></div><div class="slide-background future" style="display: block;" data-loaded="true"></div><div class="slide-background future" style="display: block;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;" data-loaded="true"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div><div class="slide-background future" style="display: none;"></div></div><div class="progress" style="display: block;"><span style="width: 0px;"></span></div><aside class="controls" style="display: block;"><button class="navigate-left" aria-label="previous slide"></button><button class="navigate-right enabled" aria-label="next slide"></button><button class="navigate-up" aria-label="above slide"></button><button class="navigate-down" aria-label="below slide"></button></aside><div class="slide-number" style="display: block;"><span class="slide-number-a">1</span></div><div class="speaker-notes" data-prevent-swipe=""></div><div class="pause-overlay"></div><div style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);" id="aria-status-div" aria-live="polite" aria-atomic="true">
					Introduction to programming with Python
					Session 9
				</div><nav class="slide-menu slide-menu--left"><ol class="slide-menu-toolbar"><li data-panel="Slides" data-button="0" class="toolbar-panel-button active-toolbar-button"><span class="slide-menu-toolbar-label">Slides</span><br><i class="fa fa-list"></i></li><li data-panel="Themes" data-button="1" class="toolbar-panel-button"><span class="slide-menu-toolbar-label">Themes</span><br><i class="fa fa-desktop"></i></li><li data-panel="Transitions" data-button="2" class="toolbar-panel-button"><span class="slide-menu-toolbar-label">Transitions</span><br><i class="fa fa-arrows-h"></i></li><li id="close"><span class="slide-menu-toolbar-label">Close</span><br><i class="fa fa-times"></i></li></ol><div data-panel="Slides" class="slide-menu-panel active-menu-panel"><ul class="slide-menu-items"><li class="slide-menu-item future" data-item="0" data-slide-h="0" data-slide-v="undefined" data-node-uid="53"><span class="slide-menu-item-title">Introduction to programming with Python</span></li><li class="slide-menu-item future" data-item="1" data-slide-h="1" data-slide-v="undefined" data-node-uid="54"><span class="slide-menu-item-title">Objectives</span></li><li class="slide-menu-item future" data-item="2" data-slide-h="2" data-slide-v="undefined" data-node-uid="55"><span class="slide-menu-item-title">The HTML language</span></li><li class="slide-menu-item future" data-item="3" data-slide-h="3" data-slide-v="undefined" data-node-uid="56"><span class="slide-menu-item-title">Example</span></li><li class="slide-menu-item future" data-item="4" data-slide-h="4" data-slide-v="undefined" data-node-uid="57"><span class="slide-menu-item-title">Grab all html from a web page</span></li><li class="slide-menu-item future" data-item="5" data-slide-h="5" data-slide-v="undefined" data-node-uid="58"><span class="slide-menu-item-title">Parsing a web page with a String's method</span></li><li class="slide-menu-item future" data-item="6" data-slide-h="6" data-slide-v="undefined" data-node-uid="59"><span class="slide-menu-item-title">Find a word between 2 other words</span></li><li class="slide-menu-item future" data-item="7" data-slide-h="7" data-slide-v="undefined" data-node-uid="60"><span class="slide-menu-item-title">Parsing the title with the find() method</span></li><li class="slide-menu-item future" data-item="8" data-slide-h="8" data-slide-v="undefined" data-node-uid="61"><span class="slide-menu-item-title">Limitation of the find() method</span></li><li class="slide-menu-item future" data-item="9" data-slide-h="9" data-slide-v="undefined" data-node-uid="62"><span class="slide-menu-item-title">Limitation of the find() method</span></li><li class="slide-menu-item future" data-item="10" data-slide-h="10" data-slide-v="undefined" data-node-uid="63"><span class="slide-menu-item-title">Regular expressions</span></li><li class="slide-menu-item future" data-item="11" data-slide-h="11" data-slide-v="undefined" data-node-uid="64"><span class="slide-menu-item-title">re.findall() using *</span></li><li class="slide-menu-item future" data-item="12" data-slide-h="12" data-slide-v="undefined" data-node-uid="65"><span class="slide-menu-item-title">Interactive example</span></li><li class="slide-menu-item future" data-item="13" data-slide-h="13" data-slide-v="undefined" data-node-uid="66"><span class="slide-menu-item-title">re.findall() case insensitive</span></li><li class="slide-menu-item future" data-item="14" data-slide-h="14" data-slide-v="undefined" data-node-uid="67"><span class="slide-menu-item-title">re.findall() using . (period)</span></li><li class="slide-menu-item future" data-item="15" data-slide-h="15" data-slide-v="undefined" data-node-uid="68"><span class="slide-menu-item-title">re.findall() using .* (period asterisk)</span></li><li class="slide-menu-item future" data-item="16" data-slide-h="16" data-slide-v="undefined" data-node-uid="69"><span class="slide-menu-item-title">re.search()</span></li><li class="slide-menu-item future" data-item="17" data-slide-h="17" data-slide-v="undefined" data-node-uid="70"><span class="slide-menu-item-title">re.sub()</span></li><li class="slide-menu-item future" data-item="18" data-slide-h="18" data-slide-v="undefined" data-node-uid="71"><span class="slide-menu-item-title">greedy regex (*)</span></li><li class="slide-menu-item future" data-item="19" data-slide-h="19" data-slide-v="undefined" data-node-uid="72"><span class="slide-menu-item-title">non-greedy regex (*?)</span></li><li class="slide-menu-item future" data-item="20" data-slide-h="20" data-slide-v="undefined" data-node-uid="73"><span class="slide-menu-item-title">Use case: Using regex to parse a webpage</span></li><li class="slide-menu-item future" data-item="21" data-slide-h="21" data-slide-v="undefined" data-node-uid="74"><span class="slide-menu-item-title">Use case: solution</span></li><li class="slide-menu-item future" data-item="22" data-slide-h="22" data-slide-v="undefined" data-node-uid="75"><span class="slide-menu-item-title">Use case: explanation</span></li><li class="slide-menu-item future" data-item="23" data-slide-h="23" data-slide-v="undefined" data-node-uid="76"><span class="slide-menu-item-title">Installing an external library</span></li><li class="slide-menu-item future" data-item="24" data-slide-h="24" data-slide-v="undefined" data-node-uid="77"><span class="slide-menu-item-title">Installing with Pycharm (1)</span></li><li class="slide-menu-item future" data-item="25" data-slide-h="25" data-slide-v="undefined" data-node-uid="78"><span class="slide-menu-item-title">Installing with Pycharm (2)</span></li><li class="slide-menu-item future" data-item="26" data-slide-h="26" data-slide-v="undefined" data-node-uid="79"><span class="slide-menu-item-title">Installing with Pycharm (3)</span></li><li class="slide-menu-item future" data-item="27" data-slide-h="27" data-slide-v="undefined" data-node-uid="80"><span class="slide-menu-item-title">Using Beautiful Soup</span></li><li class="slide-menu-item future" data-item="28" data-slide-h="28" data-slide-v="undefined" data-node-uid="81"><span class="slide-menu-item-title">BeautifulSoup: get_text()</span></li><li class="slide-menu-item future" data-item="29" data-slide-h="29" data-slide-v="undefined" data-node-uid="82"><span class="slide-menu-item-title">BeautifulSoup: find_all()</span></li><li class="slide-menu-item future" data-item="30" data-slide-h="30" data-slide-v="undefined" data-node-uid="83"><span class="slide-menu-item-title">BeautifulSoup: Tags</span></li><li class="slide-menu-item future" data-item="31" data-slide-h="31" data-slide-v="undefined" data-node-uid="84"><span class="slide-menu-item-title">BeautifulSoup: Extracting information from Tags</span></li><li class="slide-menu-item future" data-item="32" data-slide-h="32" data-slide-v="undefined" data-node-uid="85"><span class="slide-menu-item-title">BeautifulSoup: accessing a Tag through its name</span></li><li class="slide-menu-item future" data-item="33" data-slide-h="33" data-slide-v="undefined" data-node-uid="86"><span class="slide-menu-item-title">The select method (1)</span></li><li class="slide-menu-item future" data-item="34" data-slide-h="34" data-slide-v="undefined" data-node-uid="87"><span class="slide-menu-item-title">The select method (2)</span></li><li class="slide-menu-item future" data-item="35" data-slide-h="35" data-slide-v="undefined" data-node-uid="88"><span class="slide-menu-item-title">Emulating a web browser</span></li><li class="slide-menu-item future" data-item="36" data-slide-h="36" data-slide-v="undefined" data-node-uid="89"><span class="slide-menu-item-title">Installing MechanicalSoup</span></li><li class="slide-menu-item future" data-item="37" data-slide-h="37" data-slide-v="undefined" data-node-uid="90"><span class="slide-menu-item-title">MechanicalSoup: Opening a web page</span></li><li class="slide-menu-item future" data-item="38" data-slide-h="38" data-slide-v="undefined" data-node-uid="91"><span class="slide-menu-item-title">MechanicalSoup: Submitting values to a form</span></li><li class="slide-menu-item future" data-item="39" data-slide-h="39" data-slide-v="undefined" data-node-uid="92"><span class="slide-menu-item-title">MechanicalSoup: script to login</span></li><li class="slide-menu-item future" data-item="40" data-slide-h="40" data-slide-v="undefined" data-node-uid="93"><span class="slide-menu-item-title">Methods in MechanicalSoup</span></li><li class="slide-menu-item future" data-item="41" data-slide-h="41" data-slide-v="undefined" data-node-uid="94"><span class="slide-menu-item-title">Interacting with the Web in Real Time</span></li><li class="slide-menu-item future" data-item="42" data-slide-h="42" data-slide-v="undefined" data-node-uid="95"><span class="slide-menu-item-title">Use case: fetching a stock quote from Nasdaq (1)</span></li><li class="slide-menu-item future" data-item="43" data-slide-h="43" data-slide-v="undefined" data-node-uid="96"><span class="slide-menu-item-title">Use case: fetching a stock quote from Nasdaq (2)</span></li><li class="slide-menu-item future" data-item="44" data-slide-h="44" data-slide-v="undefined" data-node-uid="97"><span class="slide-menu-item-title">MechanicalSoup: script to find Boeing current price</span></li><li class="slide-menu-item future" data-item="45" data-slide-h="45" data-slide-v="undefined" data-node-uid="98"><span class="slide-menu-item-title">Repeatedly get Boeing's current price</span></li><li class="slide-menu-item future" data-item="46" data-slide-h="46" data-slide-v="undefined" data-node-uid="99"><span class="slide-menu-item-title">Introduction to the time.sleep() method</span></li><li class="slide-menu-item future" data-item="47" data-slide-h="47" data-slide-v="undefined" data-node-uid="100"><span class="slide-menu-item-title">Repeatedly get the Boeing current price: script</span></li><li class="slide-menu-item future" data-item="48" data-slide-h="48" data-slide-v="undefined" data-node-uid="101"><span class="slide-menu-item-title">Exercise: putting it all together</span></li><li class="slide-menu-item future" data-item="49" data-slide-h="49" data-slide-v="undefined" data-node-uid="102"><span class="slide-menu-item-title">Using request</span></li><li class="slide-menu-item future" data-item="50" data-slide-h="50" data-slide-v="undefined" data-node-uid="103"><span class="slide-menu-item-title">Next? Web crawling!</span></li><li class="slide-menu-item future" data-item="51" data-slide-h="51" data-slide-v="undefined" data-node-uid="104"><span class="slide-menu-item-title">Solution for Web Crawling</span></li></ul></div><div data-panel="Themes" class="slide-menu-panel"><ul class="slide-menu-items"><li class="slide-menu-item future" data-theme="css/theme/black.css" data-item="1" data-node-uid="105">Black</li><li class="slide-menu-item future" data-theme="css/theme/white.css" data-item="2" data-node-uid="106">White</li><li class="slide-menu-item future" data-theme="css/theme/league.css" data-item="3" data-node-uid="107">League</li><li class="slide-menu-item future" data-theme="css/theme/sky.css" data-item="4" data-node-uid="108">Sky</li><li class="slide-menu-item future" data-theme="css/theme/beige.css" data-item="5" data-node-uid="109">Beige</li><li class="slide-menu-item future" data-theme="css/theme/simple.css" data-item="6" data-node-uid="110">Simple</li><li class="slide-menu-item future" data-theme="css/theme/serif.css" data-item="7" data-node-uid="111">Serif</li><li class="slide-menu-item future" data-theme="css/theme/blood.css" data-item="8" data-node-uid="112">Blood</li><li class="slide-menu-item future" data-theme="css/theme/night.css" data-item="9" data-node-uid="113">Night</li><li class="slide-menu-item future" data-theme="css/theme/moon.css" data-item="10" data-node-uid="114">Moon</li><li class="slide-menu-item future" data-theme="css/theme/solarized.css" data-item="11" data-node-uid="115">Solarized</li></ul></div><div data-panel="Transitions" class="slide-menu-panel"><ul class="slide-menu-items"><li class="slide-menu-item future" data-transition="none" data-item="1" data-node-uid="116">None</li><li class="slide-menu-item future" data-transition="fade" data-item="2" data-node-uid="117">Fade</li><li class="slide-menu-item future" data-transition="slide" data-item="3" data-node-uid="118">Slide</li><li class="slide-menu-item future" data-transition="convex" data-item="4" data-node-uid="119">Convex</li><li class="slide-menu-item future" data-transition="concave" data-item="5" data-node-uid="120">Concave</li><li class="slide-menu-item future" data-transition="zoom" data-item="6" data-node-uid="121">Zoom</li></ul></div></nav><div class="slide-menu-overlay"></div><div class="slide-menu-button"><a href="#"><i class="fa fa-bars"></i></a></div></div>
		<script src="Session9_files/head.js"></script>
		<script src="Session9_files/reveal.js"></script>

		<script>
			// More info https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				history: true,
				slideNumber: true,
				center: false,

				// More info https://github.com/hakimel/reveal.js#dependencies
				dependencies: [
					{ src: 'plugin/markdown/marked.js' },
					{ src: 'plugin/markdown/markdown.js' },
					{ src: 'plugin/notes/notes.js', async: true },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/menu/menu.js' },
					{ src: 'plugin/jquery-2.0.0.min.js' },
					{ src: 'plugin/custom.js' },
					{ src: 'plugin/clipboard.min.js' },

				]
			});
		</script>
	

</body<?php></body></html>